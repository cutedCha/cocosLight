{"version":3,"sources":["assets/drawModule.ts"],"names":[],"mappings":";;;;;;;AAAA,uCAAmC;AAEnC,IAAiB,UAAU,CAyI1B;AAzID,WAAiB,UAAU;IACvB,SAAgB,UAAU,CACtB,KAAa,EACb,QAAgB,EAChB,MAAc;QAOd,IAAI,QAAQ,GAAc,EAAE,CAAC;QAC7B,IAAI,QAAQ,GAAG,EAAE,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAChC,IAAI,MAAM,GAAe,EAAE,CAAC;QAC5B,IAAI,OAAO,GAAa,EAAE,CAAC;QAC3B,IAAI,GAAG,GAAc,EAAE,CAAC;QACxB,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,QAAQ,EAAE;YACtC,IAAI,UAAU,GAAG,CAAC,CAAC;YACnB,IAAI,YAAY,GAAG,UAAU,GAAG,QAAQ,CAAC;YACzC,IAAI,KAAK,GAAG,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YAC1D,IAAI,UAAU,GAAG,uBAAuB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YAEjE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3B,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrB,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAE1B,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC3B,YAAY,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC3B,YAAY,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC3B,YAAY,EAAE,CAAC;YAEf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;aAChC;YAED,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SACnD;QACD,OAAO;YACH,QAAQ,EAAE,QAAQ;YAClB,OAAO,EAAE,OAAO;YAChB,GAAG,EAAE,GAAG;YACR,MAAM,EAAE,MAAM;SACjB,CAAC;IACN,CAAC;IA7Ce,qBAAU,aA6CzB,CAAA;IACD,SAAgB,uBAAuB,CAAC,UAAmB,EAAE,KAAa;QACtE,IAAM,OAAO,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;QACxC,IAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACnC,IAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC7B,IAAA,CAAC,GAAQ,UAAU,EAAlB,EAAE,CAAC,GAAK,UAAU,EAAf,CAAgB;QAE1B,IAAM,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,QAAQ,CAAC;QAC7C,IAAM,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,QAAQ,CAAC;QAE7C,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC/C,CAAC;IAVe,kCAAuB,0BAUtC,CAAA;IACD;;;;OAIG;IACH,SAAgB,cAAc,CAAC,IAAa,EAAE,KAAa,EAAE,MAAc;QACvE,IAAI,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;QACzB,IAAI,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC;QAC1F,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;QAEvB,IAAI,CAAC,GAAG,UAAU,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxC,IAAI,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAAE,SAAS;YACjC,IAAI,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;YACnD,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACjC;QACD,IAAM,YAAY,GAAG,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC;QAE9C,IAAI,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;QACpB,IAAI,YAAY,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC;YACpC,+BAA+B;YAC/B,EAAE,IAAI,EAAE,GAAG,CAAC,aAAa,EAAE,IAAI,EAAE,GAAG,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,EAAE;YAChE,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,EAAE,IAAI,EAAE,GAAG,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,EAAE;YAC3D,EAAE,IAAI,EAAE,GAAG,CAAC,UAAU,EAAE,IAAI,EAAE,GAAG,CAAC,eAAe,EAAE,GAAG,EAAE,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE;SAC/E,CAAC,CAAC;QAEH,aAAa;QACb,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QAEjC,mBAAmB;QACnB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;QAEhD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;QAC3C,aAAa;QACb,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;QAEtC,SAAS;QACT,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IAlCe,yBAAc,iBAkC7B,CAAA;IAED;;;;;;OAMG;IACH,SAAgB,WAAW,CAAC,QAA2B,EAAE,GAAY,EAAE,MAAc;QACjF,IAAI,MAAM,GAAG,GAAG,CAAC,SAAS,EAAE,CAAC;QAC7B,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC5B,IAAI,MAAM,GAAG,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QAEjE,0BAA0B;QAC1B,IAAI,MAAM,GAAG,WAAW,CAAC,QAAmB,EAAE,MAAM,CAAC,CAAC;QACtD,IAAI,MAAM,IAAI,CAAC,CAAC,EAAE;YACd,OAAO,MAAM,CAAC;SACjB;QAED,OAAO,MAAM,CAAC;QACd,cAAc;QACd,wFAAwF;IAC5F,CAAC;IAde,sBAAW,cAc1B,CAAA;IACD,SAAgB,WAAW,CAAC,KAAc,EAAE,GAAY;QACpD,IAAI,SAAS,GAAG,kBAAS,CAAC,aAAa,CAAC,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAC1E,IAAI,OAAO,GAAG,kBAAS,CAAC,aAAa,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;QACtE,IAAI,MAAM,GAAG,EAAE,CAAC,QAAQ;aACnB,iBAAiB,EAAE;aACnB,OAAO,CAAC,SAAS,EAAE,OAAO,EAAE,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAEzD,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YAChB,OAAO,CAAC,CAAC,CAAC;SACb;QACD,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,CACnB,kBAAS,CAAC,aAAa,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAClE,KAAK,CACR,CAAC;QACF,iBAAiB;IACrB,CAAC;IAfe,sBAAW,cAe1B,CAAA;AACL,CAAC,EAzIgB,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAyI1B;AACD,MAAM,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC","file":"","sourceRoot":"/","sourcesContent":["import demoScene from \"./demoMain\";\n\nexport namespace drawModule {\n    export function drawSector(\n        angle: number,\n        minAngle: number,\n        radius: number\n    ): {\n        vertices: cc.Vec2[];\n        indices: number[];\n        uvs: cc.Vec2[];\n        colors: cc.Color[];\n    } {\n        let vertices: cc.Vec2[] = [];\n        let startPos = cc.v2(radius, 0);\n        let colors: cc.Color[] = [];\n        let indices: number[] = [];\n        let uvs: cc.Vec2[] = [];\n        let indicesIndex = 0;\n        for (let i = 0; i < angle; i += minAngle) {\n            let startAngle = i;\n            let currentAngle = startAngle + minAngle;\n            let upPos = rotatePointAroundOrigin(startPos, startAngle);\n            let currentPos = rotatePointAroundOrigin(startPos, currentAngle);\n\n            vertices.push(cc.v2(0, 0));\n            vertices.push(upPos);\n            vertices.push(currentPos);\n\n            indices.push(indicesIndex);\n            indicesIndex++;\n            indices.push(indicesIndex);\n            indicesIndex++;\n            indices.push(indicesIndex);\n            indicesIndex++;\n\n            for (let j = 0; j < 3; j++) {\n                colors.push(cc.Color.YELLOW);\n            }\n\n            uvs.push(cc.v2(0, 0), cc.v2(0, 1), cc.v2(1, 0));\n        }\n        return {\n            vertices: vertices,\n            indices: indices,\n            uvs: uvs,\n            colors: colors,\n        };\n    }\n    export function rotatePointAroundOrigin(startAngle: cc.Vec2, angle: number): cc.Vec2 {\n        const radians = (angle * Math.PI) / 180;\n        const cosAngle = Math.cos(radians);\n        const sinAngle = Math.sin(radians);\n        let { x, y } = startAngle;\n\n        const rotatedX = x * cosAngle + y * sinAngle;\n        const rotatedY = y * cosAngle - x * sinAngle;\n\n        return cc.v2({ x: rotatedX, y: rotatedY });\n    }\n    /**\n     * 渲染灯光\n     * @param node\n     * @param angle\n     */\n    export function renderNodeMesh(node: cc.Node, angle: number, radius: number): void {\n        let mesh = new cc.Mesh();\n        let meshRender = node.getComponent(cc.MeshRenderer) || node.addComponent(cc.MeshRenderer);\n        meshRender.mesh = mesh;\n\n        let d = drawModule.drawSector(angle, 1, 1);\n        for (let i = 0; i < d.vertices.length; i++) {\n            let item = d.vertices[i];\n            if (!item.x && !item.y) continue;\n            let ray = rayCaseLine(node.position, item, radius);\n            d.vertices[i] = item.mul(ray);\n        }\n        const renderEngine = cc.renderer.renderEngine;\n\n        let gfx = cc[\"gfx\"];\n        var vfmtPosColor = new gfx.VertexFormat([\n            // 用户需要创建一个三维的盒子，所以需要三个值来保存位置信息\n            { name: gfx.ATTR_POSITION, type: gfx.ATTR_TYPE_FLOAT32, num: 3 },\n            { name: gfx.ATTR_UV0, type: gfx.ATTR_TYPE_FLOAT32, num: 2 },\n            { name: gfx.ATTR_COLOR, type: gfx.ATTR_TYPE_UINT8, num: 4, normalize: true },\n        ]);\n\n        // // 初始化网格信息\n        mesh.init(vfmtPosColor, 8, true);\n\n        // 修改 position 顶点数据\n        mesh.setVertices(gfx.ATTR_POSITION, d.vertices);\n\n        mesh.setVertices(gfx.ATTR_COLOR, d.colors);\n        // 修改 uv 顶点数据\n        mesh.setVertices(gfx.ATTR_UV0, d.uvs);\n\n        // 修改索引数据\n        mesh.setIndices(d.indices);\n    }\n\n    /**\n     * 光线测试算法\n     * @param startPos\n     * @param dir\n     * @param maxLen\n     * @returns\n     */\n    export function rayCaseLine(startPos: cc.Vec2 | cc.Vec3, dir: cc.Vec2, maxLen: number): number {\n        let noraml = dir.normalize();\n        noraml = noraml.mul(maxLen);\n        let endPos = cc.v2(noraml.x + startPos.x, noraml.y + startPos.y);\n\n        // // dir = noram(maxLen);\n        let result = testRayCase(startPos as cc.Vec2, endPos);\n        if (result != -1) {\n            return result;\n        }\n\n        return maxLen;\n        // return 100;\n        // return cc.v2(startPos.x - results[0].point.x, startPos.y - results[0].point.y).len();\n    }\n    export function testRayCase(start: cc.Vec2, end: cc.Vec2) {\n        let startWord = demoScene.sceneInstance.node.convertToWorldSpaceAR(start);\n        let endWord = demoScene.sceneInstance.node.convertToWorldSpaceAR(end);\n        let result = cc.director\n            .getPhysicsManager()\n            .rayCast(startWord, endWord, cc.RayCastType.Closest);\n\n        if (!result.length) {\n            return -1;\n        }\n        return cc.Vec2.distance(\n            demoScene.sceneInstance.node.convertToNodeSpaceAR(result[0].point),\n            start\n        );\n        // return result;\n    }\n}\nwindow[\"drawModule\"] = drawModule;\n"]}